In the algorithm, the execution of the next writer after previuos writer complete is not necessarily the waiting writer, which violates (3) prioritizing writers to obtain resources when they are available. Also, the reader portion of the code does not match the code explanation below. The code has the `P(resource_access)` appearing twice in the reader, which will directly cause a deadlock. You can change the `P(resource_access)` and `V(resource_access)` in lines 3, 9, 11, and 15 of your reader code to a new semaphore e.g., rcount_mutex to protect `read_count`. The `service_queue` is unnecessary, and the reader exit section does not need to use the semaphore `read_try`.